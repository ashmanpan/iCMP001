// AWS Amplify Configuration for Cisco CMP Portal

// This configuration will be generated by Amplify CLI
// For now, this is a template structure

const amplifyConfig = {
    Auth: {
        region: 'ap-south-1',  // AWS Mumbai region
        userPoolId: 'YOUR_USER_POOL_ID',
        userPoolWebClientId: 'YOUR_APP_CLIENT_ID',
        identityPoolId: 'YOUR_IDENTITY_POOL_ID',
    },
    API: {
        endpoints: [
            {
                name: 'CiscoCMPAPI',
                endpoint: 'YOUR_API_GATEWAY_ENDPOINT',
                region: 'ap-south-1'  // AWS Mumbai region
            }
        ],
        GraphQL: {
            endpoint: 'YOUR_APPSYNC_ENDPOINT',
            region: 'ap-south-1',  // AWS Mumbai region
            authenticationType: 'AMAZON_COGNITO_USER_POOLS'
        }
    }
};

// DynamoDB Table Names
const tableNames = {
    tenants: 'Cisco-CMP-Tenants',
    gpus: 'Cisco-CMP-GPUs',
    ucsServers: 'Cisco-CMP-UCSServers',
    nexusFabric: 'Cisco-CMP-NexusFabric',
    services: 'Cisco-CMP-Services',
    logs: 'Cisco-CMP-Logs',
    users: 'Cisco-CMP-Users'
};

// API Helper Functions
const API = {
    // GraphQL Operations
    async graphql(operation, variables) {
        // This will use AWS AppSync
        const response = await fetch(amplifyConfig.API.GraphQL.endpoint, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${await this.getAuthToken()}`
            },
            body: JSON.stringify({
                query: operation,
                variables: variables
            })
        });
        return await response.json();
    },

    // REST API Operations
    async post(endpoint, data) {
        const response = await fetch(`${amplifyConfig.API.endpoints[0].endpoint}${endpoint}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${await this.getAuthToken()}`
            },
            body: JSON.stringify(data)
        });
        return await response.json();
    },

    async get(endpoint) {
        const response = await fetch(`${amplifyConfig.API.endpoints[0].endpoint}${endpoint}`, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${await this.getAuthToken()}`
            }
        });
        return await response.json();
    },

    async getAuthToken() {
        // Get auth token from session storage or Cognito
        return sessionStorage.getItem('authToken') || '';
    }
};

// GraphQL Mutations
const mutations = {
    createTenant: `
        mutation CreateTenant($input: CreateTenantInput!) {
            createTenant(input: $input) {
                id
                name
                status
                created
                allocatedGPUs
                consumptionRate
                monthlyBudget
                currentSpend
            }
        }
    `,

    updateTenant: `
        mutation UpdateTenant($input: UpdateTenantInput!) {
            updateTenant(input: $input) {
                id
                name
                allocatedGPUs
                currentSpend
            }
        }
    `,

    allocateGPU: `
        mutation AllocateGPU($gpuId: ID!, $tenantId: ID!) {
            allocateGPU(gpuId: $gpuId, tenantId: $tenantId) {
                id
                status
                tenant
            }
        }
    `,

    deallocateGPU: `
        mutation DeallocateGPU($gpuId: ID!) {
            deallocateGPU(gpuId: $gpuId) {
                id
                status
                tenant
            }
        }
    `,

    enableService: `
        mutation EnableService($tenantId: ID!, $serviceId: ID!) {
            enableService(tenantId: $tenantId, serviceId: $serviceId) {
                tenantId
                serviceId
                enabled
            }
        }
    `,

    createLog: `
        mutation CreateLog($input: CreateLogInput!) {
            createLog(input: $input) {
                id
                timestamp
                tenantId
                action
                details
                user
            }
        }
    `
};

// GraphQL Queries
const queries = {
    listTenants: `
        query ListTenants {
            listTenants {
                items {
                    id
                    name
                    status
                    created
                    allocatedGPUs
                    consumptionRate
                    services
                    users
                    monthlyBudget
                    currentSpend
                }
            }
        }
    `,

    getTenant: `
        query GetTenant($id: ID!) {
            getTenant(id: $id) {
                id
                name
                status
                created
                allocatedGPUs
                consumptionRate
                services
                users
                monthlyBudget
                currentSpend
            }
        }
    `,

    listGPUs: `
        query ListGPUs {
            listGPUs {
                items {
                    id
                    model
                    memory
                    ucsServer
                    status
                    tenant
                    vendor
                }
            }
        }
    `,

    listUCSServers: `
        query ListUCSServers {
            listUCSServers {
                items {
                    id
                    name
                    rack
                    nexusSwitch
                    status
                    gpuCount
                }
            }
        }
    `,

    listNexusFabric: `
        query ListNexusFabric {
            listNexusFabric {
                items {
                    id
                    model
                    ports
                    connectedServers
                    status
                }
            }
        }
    `,

    listLogs: `
        query ListLogs($tenantId: ID) {
            listLogs(tenantId: $tenantId) {
                items {
                    id
                    timestamp
                    tenantId
                    action
                    details
                    user
                }
            }
        }
    `
};

// Data Operations
const DataService = {
    // Tenants
    async getAllTenants() {
        try {
            const result = await API.graphql(queries.listTenants);
            return result.data.listTenants.items;
        } catch (error) {
            console.error('Error fetching tenants:', error);
            return mockTenants; // Fallback to mock data
        }
    },

    async createTenant(tenantData) {
        try {
            const result = await API.graphql(mutations.createTenant, { input: tenantData });

            // Log the action
            await this.createLog({
                tenantId: result.data.createTenant.id,
                action: 'Tenant Created',
                details: `Created tenant: ${tenantData.name}`,
                user: sessionStorage.getItem('email')
            });

            return result.data.createTenant;
        } catch (error) {
            console.error('Error creating tenant:', error);
            throw error;
        }
    },

    // GPUs
    async getAllGPUs() {
        try {
            const result = await API.graphql(queries.listGPUs);
            return result.data.listGPUs.items;
        } catch (error) {
            console.error('Error fetching GPUs:', error);
            return getAllGPUs(); // Fallback to mock data
        }
    },

    async allocateGPU(gpuId, tenantId) {
        try {
            const result = await API.graphql(mutations.allocateGPU, { gpuId, tenantId });

            // Log the action
            await this.createLog({
                tenantId: tenantId,
                action: 'GPU Allocated',
                details: `Allocated GPU ${gpuId}`,
                user: sessionStorage.getItem('email')
            });

            return result.data.allocateGPU;
        } catch (error) {
            console.error('Error allocating GPU:', error);
            throw error;
        }
    },

    async deallocateGPU(gpuId) {
        try {
            const result = await API.graphql(mutations.deallocateGPU, { gpuId });

            // Log the action
            await this.createLog({
                action: 'GPU Deallocated',
                details: `Deallocated GPU ${gpuId}`,
                user: sessionStorage.getItem('email')
            });

            return result.data.deallocateGPU;
        } catch (error) {
            console.error('Error deallocating GPU:', error);
            throw error;
        }
    },

    // Services
    async enableService(tenantId, serviceId) {
        try {
            const result = await API.graphql(mutations.enableService, { tenantId, serviceId });

            // Log the action
            await this.createLog({
                tenantId: tenantId,
                action: 'Service Enabled',
                details: `Enabled service ${serviceId}`,
                user: sessionStorage.getItem('email')
            });

            return result.data.enableService;
        } catch (error) {
            console.error('Error enabling service:', error);
            throw error;
        }
    },

    // Logs
    async createLog(logData) {
        try {
            logData.timestamp = new Date().toISOString();
            const result = await API.graphql(mutations.createLog, { input: logData });
            return result.data.createLog;
        } catch (error) {
            console.error('Error creating log:', error);
        }
    },

    async getLogs(tenantId = null) {
        try {
            const result = await API.graphql(queries.listLogs, { tenantId });
            return result.data.listLogs.items;
        } catch (error) {
            console.error('Error fetching logs:', error);
            return mockLogs; // Fallback to mock data
        }
    },

    // UCS Servers
    async getUCSServers() {
        try {
            const result = await API.graphql(queries.listUCSServers);
            return result.data.listUCSServers.items;
        } catch (error) {
            console.error('Error fetching UCS servers:', error);
            return mockUCSServers; // Fallback to mock data
        }
    },

    // Nexus Fabric
    async getNexusFabric() {
        try {
            const result = await API.graphql(queries.listNexusFabric);
            return result.data.listNexusFabric.items;
        } catch (error) {
            console.error('Error fetching Nexus fabric:', error);
            return mockNexusFabric; // Fallback to mock data
        }
    }
};

// Initialize Amplify (to be called when using actual Amplify)
function initializeAmplify() {
    // This will be uncommented when Amplify is properly set up
    // Amplify.configure(amplifyConfig);
    console.log('Amplify configuration loaded');
}

// Export for use in other files
if (typeof module !== 'undefined' && module.exports) {
    module.exports = { amplifyConfig, API, mutations, queries, DataService, tableNames };
}
